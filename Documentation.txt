Assumptions:

- Symbols and instruments are the same thing

- Size and volume are the same thing.

- Symbols and flags are standardised values and are not custom strings that could be any value.

- Prices and price calculations are not limited to 2 decimal places.

- The "largest trade" mentioned in question 1 of the specification refers to a trade with the largest product of price and size (i.e. price x size), not just the largest size or price.

- The "average price" in question 2 of the specification is referring to the Volume Weighted Average Price (VWAP).

- Information like largest trade for an instrument, number of trades per instrument and flag and average price will be queried frequently and need to be readily available to query at any moment.

- Additional trade information like largest trade and average may be required in the future.

- Project may be used in a high concurrency low latency environment and needs to be thread safe and performant. 

- Current data feed for trades is via CSV file but this may change in the future and needs to be interchangeable.

- The CSV data feed will always contain correct data that is valid and will never contain corrupt or invalid data.


Notes:

- The project can be imported as a gradle project.

- There is no main method, but there is an integration test (TradeAnalyticsIntegrationTest.java) which gives a good idea on how the application is put together as well as several unit tests.

- The application works as follows:
	- There is a producer which calls a trade parser, retrieves the trades from a feed and places them onto a queue.
	- On the other end of the queue is a consumer which has several Trade processors subscribed to it.
	- Each trade processor answers one of the following questions on the specification.
	- When the consumer retrieves a trade, it calls "process" on the different subscribed processors which then process the trade and add the results to a map which is used to keep track of all trade information.

